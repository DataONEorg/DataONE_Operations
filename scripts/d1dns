import sys
import logging
import argparse
import json
import d1_admin_tools
import keyring
import route53

"""
Manage DataONE DNS entries.

DataONE DNS uses Amazon Route53. This script enables retrieval of DNS entries.

Later versions will support setting DNS entries. 

On OS-X expects keychain to have two entries available:
d1.route53.accesskeyid = the access key aidentifier
d1.route53.accesskey = the access key (secret)

Example, CSV of IP,DNS for all A records:
  
  d1dns -t A -f json | jq -r '. | map([.values, .name] | join(",")) | join("\n")'
"""

KEYTOOL_ROUTE53_KEYID = "d1.route53.accesskeyid"
KEYTOOL_ROUTE53_KEY   = "d1.route53.accesskey"

def removeNameLastDot(name):
    while name.endswith("."):
        name = name[:-1]
    return name


def getZoneByName(conn, zone_name="dataone.org."):
    if not zone_name.endswith("."):
        zone_name += "."
    for zone in conn.list_hosted_zones():
        logging.debug("Found zone name, id: %s %s", zone.name, zone.id)
        if zone.name == zone_name:
            return zone.id
    return None


def getZoneEntries(record_type=None, zone_name="dataone.org", data_only=False, name_only=False):
    result = []
    conn = route53.connect(
        keyring.get_password("system", KEYTOOL_ROUTE53_KEYID),
        keyring.get_password("system", KEYTOOL_ROUTE53_KEY)
    )
    logging.info("Looking up zone_id for " + zone_name)
    zone_id = getZoneByName(conn, zone_name)
    logging.info("Zone_id = " + zone_id)
    if zone_id is None:
        return result
    hosted_zone = conn.get_hosted_zone_by_id(zone_id)
    for record_set in hosted_zone.record_sets:
        match = True
        if not record_type is None:
            match = (record_set.rrset_type == record_type)
        if match:
            if len(record_set.records) == 1:
                data  = record_set.records[0]
            else:
                data = record_set.records

            if data_only:
                result.append(data)
            elif name_only:
                result.append(removeNameLastDot(record_set.name))
            else:
                entry = {
                    "kind": record_set.rrset_type,
                    "values": data,
                    "name": removeNameLastDot(record_set.name),
                }
                result.append(entry)
    return result


def main():
    parser = argparse.ArgumentParser(description=__doc__,
                                     formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument("-t", '--record_type',
                        default="A",
                        help="Record type to return (default = 'A'")
    parser.add_argument("-i", '--ip_only',
                        action="store_true",
                        help="Show only the record data (ip addresses for A records)")
    parser.add_argument("-N", '--name_only',
                        action="store_true",
                        help="Show only the record name")


    args, config = d1_admin_tools.defaultScriptMain(parser)
    logger = logging.getLogger('main')
    format = args.format.lower()
    if format not in ['text', 'json', ]:
        format = 'text'
    if args.ip_only and args.name_only:
        logging.error("Only one of ip_only or name_only can be specified.")
        return 1
    result = getZoneEntries(record_type=args.record_type, data_only=args.ip_only, name_only=args.name_only)
    if format == "json":
        print(json.dumps(result, indent=2))
    else:
        for row in result:
            if args.ip_only:
                print(f"{row['values']}")
            elif args.name_only:
                print(f"{row}")
            else:
                print(f"{row['kind']} {row['name']} {row['values']}")
    return 0

if __name__ == "__main__":
    sys.exit( main() )