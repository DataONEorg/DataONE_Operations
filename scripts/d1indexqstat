"""

Examine the postgres index queue.

Requires shell access and appropriate .pgpass setup

select (xpath('//originMemberNode/text()', sysmetadata::xml))[1]::varchar AS node, status, deleted, formatid, count(*) as cnt
from index_task group by node,status,deleted,formatid order by node, status;

                Table "public.index_task"
       Column        |          Type          | Modifiers
---------------------+------------------------+-----------
 id                  | bigint                 | not null
 datesysmetamodified | bigint                 | not null
 deleted             | boolean                | not null
 formatid            | character varying(255) |
 nextexecution       | bigint                 | not null
 objectpath          | text                   |
 pid                 | text                   | not null
 priority            | integer                | not null
 status              | character varying(255) |
 sysmetadata         | text                   |
 taskmodifieddate    | bigint                 | not null
 trycount            | integer                | not null
 version             | integer                | not null
Indexes:
    "index_task_pkey" PRIMARY KEY, btree (id)

"""

import sys
import logging
import argparse
import d1_admin_tools
from d1_admin_tools import operations
import datetime
import dateparser
import os
import csv
import codecs
import json
from fabric.api import task, execute, run, get

QUEUE_DATABASE='d1-index-queue'
PSQL_READONLY_USER = "dataone_readonly"
PSQL_DATE_FORMAT="%Y-%m-%dT%H:%M:%S.%f%z"

'''
select TIMESTAMP 'epoch' + datesysmetamodified * INTERVAL '1 millisecond' as SMD, nextexecution, priority, TIMESTAMP 'epoch' + taskmodifieddate * INTERVAL '1 millisecond' as tmd, trycount, ROW_NUMBER() OVER() from index_task where pid='e2d409da-a08c-4391-a2a6-59764b80548b';

select A.pid, A.N from (select pid, ROW_NUMBER() OVER() as N from index_task where status='NEW' order by taskmodifieddate) A where A.pid='e2d409da-a08c-4391-a2a6-59764b80548b'

SELECT to_timestamp(A.dsm/1000) as dsm, to_timestamp(A.tmd/1000) as tmd,
A.priority, A.node, A.pid, A.trycount, A.qpos, A.qpos1
FROM (SELECT datesysmetamodified AS dsm, taskmodifieddate AS tmd, priority, pid, trycount, status,
row_number() over (order by priority ASC, datesysmetamodified ASC) as qpos,
row_number() over (order by priority ASC, taskmodifieddate ASC) as qpos1,
(xpath('//originMemberNode/text()', sysmetadata::xml))[1]::varchar AS node
FROM index_task WHERE status='IN PROCESS') A order by qpos1 desc;


'''

def getPIDQPos(pid, dest_file, qstat='IN PROCESS', tmp_file=None):
  logger = logging.getLogger("main")
  if tmp_file is None:
    tmp_file = operations.tmpFileName("/tmp/", prefix="sql", ext="txt")
#  SQL = '''SELECT A.n, A.smd, A.tmd, A.priority, A.trycount, A.status, A.pid FROM (
#SELECT TIMESTAMP 'epoch' + datesysmetamodified * INTERVAL '1 millisecond' as SMD,
#       nextexecution, priority,
#       TIMESTAMP 'epoch' + taskmodifieddate * INTERVAL '1 millisecond' as tmd,
#       trycount, pid, status, ROW_NUMBER() OVER(order by datesysmetamodified desc) as n from index_task) A
#WHERE A.pid='{0}';'''.format(pid)

  #TODO: Escape pid !!!
  SQL='''SELECT to_timestamp(A.dsm/1000) as dsm, to_timestamp(A.tmd/1000) as tmd,
A.priority, A.node, A.pid, A.trycount, A.qpos
FROM (SELECT datesysmetamodified AS dsm, taskmodifieddate AS tmd, priority, pid, trycount, status,
row_number() over (order by priority ASC, taskmodifieddate ASC) as qpos,
(xpath('//originMemberNode/text()', sysmetadata::xml))[1]::varchar AS node
FROM index_task WHERE status='{0}') A WHERE A.pid='{1}' '''.format(qstat, pid)

  cmd = "psql -h localhost -U " + PSQL_READONLY_USER + " " + QUEUE_DATABASE
  cmd += " -P pager=off --single-transaction"
  cmd += " -o " + tmp_file + " -c \"" + SQL + ";\""
  logger.info("PSQL Command = %s", cmd)
  run(cmd)
  get(tmp_file, dest_file)
  run("rm " + tmp_file)


def getIndexQueueStatus(dest_file, tmp_file=None, include_node=True, include_formatid=True, include_time=False):
  logger = logging.getLogger("main")
  if tmp_file is None:
    tmp_file = operations.tmpFileName("/tmp/", prefix="sql", ext="txt")
  SELECT = ["status", "deleted", "COUNT(*) AS cnt",
            "to_timestamp(min(datesysmetamodified)/1000) as minTmod",
            "to_timestamp(max(datesysmetamodified)/1000) as maxTmod",
            ]
  GROUPBY = ["status", "deleted", ]
  ORDERBY = ["status", ]
  if include_formatid:
    SELECT.append("formatid")
    GROUPBY.append("formatid")
    ORDERBY.append("formatid")
    #SQL = "select " + ",".join(SELECT) + "from index_task group by status,deleted,formatid order by status,formatid"
  if include_node:
    SELECT.insert(0, "(xpath('//originMemberNode/text()', sysmetadata::xml))[1]::varchar AS node")
    GROUPBY.insert(0, "node")
    ORDERBY.insert(0, "node")
    #if include_formatid:
    #  SQL = """select (xpath('//originMemberNode/text()', sysmetadata::xml))[1]::varchar AS node,
    #  status, deleted, formatid, count(*) as cnt from index_task group by node,status,deleted,formatid order by node, status"""
    #else:
    #  SQL = """select (xpath('//originMemberNode/text()', sysmetadata::xml))[1]::varchar AS node,
    #  status, deleted, count(*) as cnt from index_task group by node,status,deleted order by node, status"""

  SQL = "SELECT " + ",".join(SELECT) + " FROM index_task GROUP BY " + ",".join(GROUPBY) + " ORDER BY " + ",".join(ORDERBY)
  cmd = "psql -h localhost -U " + PSQL_READONLY_USER + " " + QUEUE_DATABASE
  cmd += " -P pager=off --single-transaction"
  cmd += " -o " + tmp_file + " -c \"" + SQL + ";\""
  logger.info("PSQL Command = %s", cmd)
  run(cmd)
  get(tmp_file, dest_file)
  run("rm " + tmp_file)


def getIndexQueuePIDs(dest_file, status, tmp_file=None, include_timestamps=False):
  # COPY (SELECT * from users) To '/tmp/output.csv' With CSV;
  logger = logging.getLogger("main")
  if tmp_file is None:
    tmp_file = operations.tmpFileName("/tmp/", prefix="sql", ext="txt")
  SQL = "COPY (SELECT pid from index_task where status='{0}') TO stdout WITH CSV".format(status)
  if include_timestamps:
    SQL = """COPY (SELECT row_number() over(order by datesysmetamodified) as n, priority,
    datesysmetamodified, nextexecution, taskmodifieddate, pid
    FROM index_task WHERE status='{0}') TO stdout WITH CSV""".format(status)
  cmd = "psql -h localhost -U " + PSQL_READONLY_USER + " " + QUEUE_DATABASE
  cmd += " -P pager=off --single-transaction"
  cmd += " -o " + tmp_file + " -c \"" + SQL + ";\""
  #cmd += " -c \"" + SQL + ";\""
  logger.info("PSQL Command = %s", cmd)
  run(cmd)
  get(tmp_file, dest_file)
  run("rm " + tmp_file)


def main():
  parser = argparse.ArgumentParser(description=__doc__,
    formatter_class=argparse.RawDescriptionHelpFormatter)
  parser.add_argument('host',
                      help='Host name to query')
  parser.add_argument('-N', '--include_node',
                      action='store_true',
                      default=False,
                      help="Include nodeId in report")
  parser.add_argument('-F', '--include_formatid',
                      action='store_true',
                      default=False,
                      help="Include formatId in report")
  parser.add_argument('-I','--identifiers',
                      default=None,
                      help='Output identifiers for entries of specified state (NEW, IN PROCESS, or FAILED). Overrides -N and -F')
  parser.add_argument('-t','--include_timestamps',
                      action='store_true',
                      default=False,
                      help='Include timestamps when requesting identifiers')
  parser.add_argument('-P','--pidqpos',
                      default=None,
                      help='Get the queue position for the specified PID, overrides other parameters')

  args, config = d1_admin_tools.defaultScriptMain(parser, with_config=False, with_environment=False, with_format=False)
  dst_file = operations.tmpFileName("/tmp", prefix="qcount", ext='txt')
  if args.pidqpos is not None:
    execute(getPIDQPos, args.pidqpos, dst_file, host=args.host)
    with open(dst_file, 'r') as src:
      print((src.read()))
    return 0
  if args.identifiers is not None:
    status = args.identifiers.upper()
    valid_status = ["NEW", "FAILED", "IN PROCESS"]
    if status not in valid_status:
      logging.error("Invalid status requested '%s'. Expecting on of %s", args.identifiers, ", ".join(valid_status))
      return 1
    execute(getIndexQueuePIDs, dst_file, status, include_timestamps=args.include_timestamps, host=args.host)
  else:
    execute( getIndexQueueStatus, dst_file, include_node=args.include_node, include_formatid=args.include_formatid, host=args.host)
  with open(dst_file, 'r') as src:
    print((src.read()))
  return 0


if __name__ == "__main__":
  sys.exit(main())
