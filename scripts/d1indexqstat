'''

select (xpath('//originMemberNode/text()', sysmetadata::xml))[1]::varchar AS node, status, deleted, formatid, count(*) as cnt
from index_task group by node,status,deleted,formatid order by node, status;
'''

import sys
import logging
import argparse
import d1_admin_tools
from d1_admin_tools import operations
import datetime
import dateparser
import os
import csv
import codecs
import json
from fabric.api import task, execute, run, get

QUEUE_DATABASE='d1-index-queue'
PSQL_READONLY_USER = "dataone_readonly"
PSQL_DATE_FORMAT="%Y-%m-%dT%H:%M:%S.%f%z"


def getIndexQueueStatus(dest_file, tmp_file=None, include_node=True, include_formatid=True):
  logger = logging.getLogger("main")
  if tmp_file is None:
    tmp_file = operations.tmpFileName("/tmp/", prefix="sql", ext="txt")
  SQL = "SELECT status,deleted,COUNT(*) AS cnt FROM index_task GROUP BY status,deleted ORDER BY status"
  if include_formatid:
    SQL = """select status, deleted, formatid, count(*) as cnt from index_task group by status,deleted,formatid order by status,formatid"""
  if include_node:
    if include_formatid:
      SQL = """select (xpath('//originMemberNode/text()', sysmetadata::xml))[1]::varchar AS node,
 status, deleted, formatid, count(*) as cnt from index_task group by node,status,deleted,formatid order by node, status"""
    else:
      SQL = """select (xpath('//originMemberNode/text()', sysmetadata::xml))[1]::varchar AS node,
      status, deleted, count(*) as cnt from index_task group by node,status,deleted order by node, status"""
  cmd = "psql -h localhost -U " + PSQL_READONLY_USER + " " + QUEUE_DATABASE
  cmd += " -P pager=off --single-transaction"
  cmd += " -o " + tmp_file + " -c \"" + SQL + ";\""
  logger.info("PSQL Command = %s", cmd)
  run(cmd)
  get(tmp_file, dest_file)
  run("rm " + tmp_file)


def getIndexQueuePIDs(dest_file, status, tmp_file=None, include_timestamps=False):
  logger = logging.getLogger("main")
  if tmp_file is None:
    tmp_file = operations.tmpFileName("/tmp/", prefix="sql", ext="txt")
  SQL = "SELECT pid from index_task where status='{0}'".format(status)
  if include_timestamps:
    SQL = "SELECT pid, datesysmetamodified, nextexecution, taskmodifieddate from index_task where status='{0}'".format(status)
  cmd = "psql -h localhost -U " + PSQL_READONLY_USER + " " + QUEUE_DATABASE
  cmd += " -P pager=off --single-transaction"
  cmd += " -o " + tmp_file + " -c \"" + SQL + ";\""
  logger.info("PSQL Command = %s", cmd)
  run(cmd)
  get(tmp_file, dest_file)
  run("rm " + tmp_file)


def main():
  parser = argparse.ArgumentParser(description='Retrieve identifiers from a CN direct from database.')
  parser.add_argument('host',
                      help='Host name to query')
  parser.add_argument('-N', '--include_node',
                      action='store_true',
                      default=False,
                      help="Include nodeId in report")
  parser.add_argument('-F', '--include_formatid',
                      action='store_true',
                      default=False,
                      help="Include formatId in report")
  parser.add_argument('-I','--identifiers',
                      default=None,
                      help='Output identifiers for entries of specified state (NEW, IN PROCESS, or FAILED). Overrides -N and -F')
  parser.add_argument('-t','--include_timestamps',
                      action='store_true',
                      default=False,
                      help='Include timestamps when requesting identifiers')

  args, config = d1_admin_tools.defaultScriptMain(parser, with_config=False, with_environment=False, with_format=False)
  dst_file = operations.tmpFileName("/tmp", prefix="qcount", ext='txt')
  if args.identifiers is not None:
    status = args.identifiers.upper()
    valid_status = ["NEW", "FAILED", "IN PROCESS"]
    if status not in valid_status:
      logging.error("Invalid status requested '%s'. Expecting on of %s", args.identifiers, ", ".join(valid_status))
      return 1
    execute(getIndexQueuePIDs, dst_file, status, include_timestamps=args.include_timestamps, host=args.host)
  else:
    execute( getIndexQueueStatus, dst_file, include_node=args.include_node, include_formatid=args.include_formatid, host=args.host)
  with open(dst_file, 'r') as src:
    print(src.read())
  return 0


if __name__ == "__main__":
  sys.exit(main())
