#!/usr/bin/env python

"""
CRUD operations on protected node properties.

IMPORTANT:
  This script won't work without a direct or tunneled connection to a CN
  LDAP server. e.g.:

    ssh -L3890:localhost:389 cn-dev-ucsb-1.test.dataone.org

  LDAP will then be available on port 3890 on your machine.

Protected node properties are set directly in the node document store (i.e. LDAP) on the CN and are not updated by changes to a Member Node node document.

Protected node properties are all key, value entries that appear in the node document Properties element with a key prefix of "CN_"

Example: add an entry:

  dn: d1NodePropertyId=CN_logo_url_2,cn=urn:node:mnDemo6,dc=dataone,dc=org
  changetype: add
  objectClass: top
  objectClass: d1NodeProperty
  d1NodeId: urn:node:mnDemo6
  d1NodePropertyId: CN_logo_url_2
  d1NodePropertyKey: CN_logo_url
  d1NodePropertyValue: https://raw.github.com

Example: delete an entry:

dn: d1NodePropertyId=CN_logo_url_2,cn=urn:node:mnDemo6,dc=dataone,dc=org
changetype: delete

Example: find node properties for NodeID:

  ldapsearch -H ldap://localhost -D cn=admin,dc=dataone,dc=org -w PASSWORD \
   -b "cn=urn:node:mnDemo6,dc=dataone,dc=org" \
   -s one -a always -z 1000 -LLL \
   "(objectClass=d1NodeProperty)"

Yaml properties file:

nodes:
  - nodeId: "urn:node:blah"
    properties:
      CN_node_name: "Some node name"
  - nodeId: "urn:node:other"
"""
import argparse
import io
import logging
import os.path
import sys
import json
import ldif
import rich
import rich.table
import rich.console
import yaml
import d1_admin_tools
from d1_admin_tools import d1_node_properties as d1np
from pprint import pprint


def printNodeProperties(properties, format="text"):
    if format == "json":
        print((json.dumps(properties)))
        return
    dn = properties["dn"]
    print(("DN: {0}".format(dn)))
    print(("{0:25}  {1} ".format("Key", "Value")))
    for entry in properties["properties"]:
        print(
            ("{0:25}  {1}".format(entry[2].decode("utf-8"), entry[3].decode("utf-8")))
        )


def processUpdateFromYaml(conn, yaml_file, dry_run=True):
    _L = logging.getLogger("YamlBatch")
    properties = {}
    with open(yaml_file, "r") as yaml_src:
        properties = yaml.load(yaml_src)
    for node_props in properties["nodes"]:
        node_id = node_props["nodeId"]
        for the_key in node_props["properties"]:
            if the_key not in d1np.ALLOWED_PROPERTIES:
                _L.error("Bad key: %s", the_key)
                break
            if dry_run:
                _L.info(
                    "Set %s.%s to %s",
                    node_id,
                    the_key,
                    node_props["properties"][the_key],
                )
            else:
                d1np.createOrUpdateNodeProperty(
                    conn, node_id, the_key, node_props["properties"][the_key]
                )
        the_key = "*"
        results = d1np.readNodeProperty(conn, node_id, the_key)
        printNodeProperties(results)


# === main ===

def ldap_entry_to_strings(entry):
    res = {}
    for k, v in entry.items():
        if isinstance(v, list):
            res[k] = [vv.decode("utf-8") for vv in v]
        else:
            res[k] = str(v)
    return res

def main():
    defaults = {"format": ["text", "json"]}
    parser = argparse.ArgumentParser(
        description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument(
        "-H",
        "--host",
        default="ldap://localhost:3890",
        help="LDAP host, as URL (ldap://localhost:3890)",
    )
    parser.add_argument(
        "-I",
        "--nodeid",
        action="store",
        help="ID of MN for which properties are being edited",
    )
    parser.add_argument(
        "-k",
        "--key",
        default="*",
        help="Property to set ({0})".format(" ,".join(d1np.ALLOWED_PROPERTIES)),
    )
    parser.add_argument(
        "-o",
        "--operation",
        default="read",
        help="Operation to perform (read, update, list)",
    )
    parser.add_argument(
        "-p",
        "--password",
        default=None,
        help="LDAP bind password for cn=admin,dc=dataone,dc=org",
    )
    parser.add_argument(
        "value",
        nargs="?",
        default=None,
        help="Value of property to set, no value update deletes",
    )
    parser.add_argument(
        "-y", "--yaml", default=None, help="YAML file to read properties for update"
    )
    parser.add_argument(
        "-Y",
        "--dry_run",
        action="store_true",
        default=False,
        help="Don't do anything, just show changes.",
    )
    args, config = d1_admin_tools.defaultScriptMain(parser, defaults)
    logger = logging.getLogger("main")
    operation = args.operation.lower()
    if operation not in ["read", "update", "list"]:
        print(
            ("operation must be one of 'read' or 'update', not '{0}'".format(operation))
        )
        return 1
    the_key = args.key
    conn = d1np.getLDAPConnection(host=args.host, password=args.password)
    style_bold = rich.style.Style(color=None, bgcolor=None, bold=True)
    style_default = rich.style.Style(color=None, bgcolor=None, bold=False)
    style_error = rich.style.Style(color="bright_red", bgcolor=None, bold=False)
    if operation == "list":
        res = d1np.listNodes(
            conn,
            attrs=[
                "d1NodeId",
                "d1NodeBaseURL",
                "d1NodeApproved",
                "d1NodeState",
                "d1NodeSynchronize",
                "d1NodeReplicate",
            ],
        )
        table = rich.table.Table()
        row = ["NodeId", "URL", "Approv", "State", "Sync", "Repl"]
        for col in row:
            table.add_column(col)
        warnings = []
        urls = []
        for row in res:
            trow = []
            for entry in row:
                trow.append(entry.decode("utf-8"))
            style = style_default
            if trow[3] == "up":
                style = style_bold
            if trow[1] in urls:
                warnings.append(f"Duplicate Base URL: {trow[1]}")
                style = style_error
            table.add_row(*trow, style=style)
            urls.append(trow[1])
        console = rich.console.Console()
        console.print(table)
        for warning in warnings:
            logger.warning(warning)
        return 0
    if args.nodeid is None and args.yaml is None:
        print("nodeid or yaml file requried")
        return 1
    if operation == "update":
        if args.yaml is not None:
            if not os.path.exists(args.yaml):
                logger.error("No YAML at %s", args.yaml)
            processUpdateFromYaml(conn, args.yaml, dry_run=args.dry_run)
            conn.unbind_s()
            return 0
        else:
            if the_key not in d1np.ALLOWED_PROPERTIES:
                print(
                    (
                        "Key must be one of: {0}".format(
                            " ,".join(d1np.ALLOWED_PROPERTIES)
                        )
                    )
                )
                return 1
            d1np.createOrUpdateNodeProperty(conn, args.nodeid, args.key, args.value)
            the_key = "*"

    #output = io.StringIO()
    #ldif_writer = ldif.LDIFWriter(output)
    all_properties = d1np.getNodeProperties(conn, args.nodeid)
    property_dict = {
    }
    for k in d1np.ALLOWED_PROPERTIES:
        property_dict[k] = None
    for dn, entry in all_properties:
        #ldif_writer.unparse(dn, entry)
        sentry = ldap_entry_to_strings(entry)
        if 'd1Node' in sentry.get('objectClass', []):
            # Properties set in the node document
            doc = {}
            for k, v in sentry.items():
                if k == "objectClass":
                    continue
                if isinstance(v, list):
                    if len(v) == 1:
                        property_dict[k] = v[0]
                    else:
                        property_dict[k] = v
                else:
                    property_dict[k] = v
            #property_dict[args.nodeid] = {'node': doc}
        elif 'd1NodeProperty' in sentry.get('objectClass', []):
            # Other properties, including CN_*
            k = sentry['d1NodePropertyId'][0]
            v = sentry['d1NodePropertyValue']
            if isinstance(v, list):
                if len(v) == 1:
                    v = v[0]
            property_dict[k] = v
    if args.format == "json":
        rich.print_json(data=property_dict)
    else:
        table = rich.table.Table()
        table.add_column("Property")
        table.add_column("Value")
        for k, v in property_dict.items():
            if k.startswith('CN_'):
                table.add_row(k, v, style=style_bold)
            else:
                table.add_row(k, v, style=style_default)
        console = rich.console.Console()
        console.print(table)

    #print(json.dumps(property_dict, indent=2))
    #results = d1np.readNodeProperty(conn, args.nodeid, the_key)
    #printNodeProperties(results, args.format)
    conn.unbind_s()


if __name__ == "__main__":
    sys.exit(main())
