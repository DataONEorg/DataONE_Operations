#!/usr/bin/env python
'''
URL encode or decode

Examples:

  DATA="https://some.host.name/path with/spaces/test?q=a:b&rows=10#fragment"

  echo "$DATA" | urlx -u
  https://some.host.name/path%20with/spaces/test?q=a%3Ab&rows=10#fragment

  urlx -u "$DATA"
  https://some.host.name/path%20with/spaces/test?q=a%3Ab&rows=10#fragment

  echo "$DATA" | urlx
  https%3A//some.host.name/path%20with/spaces/test%3Fq%3Da%3Ab%26rows%3D10%23fragment%0A

  echo "https://some.host.name/path%20with/spaces/test?q=a%3Ab&rows=10#fragment" | urlx -u -d
  https://some.host.name/path with/spaces/test?q=a:b&rows=10#fragment

  echo "https://some.host.name/path%20with/spaces/test?q=a%3Ab&rows=10#fragment" | urlx -d
  https://some.host.name/path with/spaces/test?q=a:b&rows=10#fragment

  echo "https%3A//some.host.name/path%20with/spaces/test%3Fq%3Da%3Ab%26rows%3D10%23fragment%0A" | urlx -d
  https://some.host.name/path with/spaces/test?q=a:b&rows=10#fragment
'''

import sys
import logging
import argparse
import urllib
import urlparse
import posixpath

# from http://stackoverflow.com/questions/7894384/python-get-url-path-sections
def pathParse(path_string, normalize=True, module=posixpath):
  result = []
  if normalize:
    tmp = module.normpath(path_string)
  else:
    tmp = path_string
  while tmp != "/" and len(tmp) > 0:
    (tmp, item) = module.split(tmp)
    result.insert(0, item)
    print tmp
  return result



def doEncode(instr, full_url=False):
  res = {}
  if not full_url:
    logging.info("Encoding string: %s", instr)
    res = urllib.quote(instr, safe='')
  else:
    logging.info("Parsing and Encoding URL: %s", instr)
    url_parts = urlparse.urlsplit(instr, allow_fragments=True)
    url_parts_enc = [url_parts.scheme,
                     url_parts.netloc,
                     url_parts.path,
                     url_parts.query,
                     url_parts.fragment,
                     url_parts.username,
                     url_parts.password,
                     url_parts.hostname,
                     url_parts.port]
    paths = pathParse(url_parts.path)
    paths_enc = []
    for path in paths:
      paths_enc.append(urllib.quote(path))
    url_parts_enc[2] = "/".join(paths_enc)
    qs = urlparse.parse_qsl(url_parts.query, keep_blank_values=True)
    qs_encoded = []
    for element in qs:
      qs_encoded.append("{0}={1}".format(element[0],urllib.quote(element[1])))
    url_parts_enc[3] = "&".join(qs_encoded)

    #TODO: The urlunsplit method doesn't handle the other items that may be split from the url
    res = urlparse.urlunsplit(url_parts_enc[:5])
  return res.strip()


def doDecode(instr, full_url=False):
  res = {}
  if not full_url:
    logging.info("Decoding string: %s", instr)
    res = urllib.unquote(instr)
  else:
    logging.info("Parsing and decoding URL: %s", instr)
    url_parts = urlparse.urlsplit(instr, allow_fragments=True)
    url_parts_dec = [url_parts.scheme,
                     url_parts.netloc,
                     url_parts.path,
                     url_parts.query,
                     url_parts.fragment,
                     url_parts.username,
                     url_parts.password,
                     url_parts.hostname,
                     url_parts.port]
    paths = pathParse(url_parts.path, normalize=False)
    paths_dec = []
    for path in paths:
      paths_dec.append(urllib.unquote(path))
    url_parts_dec[2] = "/".join(paths_dec)
    qs = urlparse.parse_qsl(url_parts.query, keep_blank_values=True)
    qs_decoded = []
    for element in qs:
      qs_decoded.append("{0}={1}".format(element[0], urllib.unquote(element[1])))
    url_parts_dec[3] = "&".join(qs_decoded)

    # TODO: The urlunsplit method doesn't handle the other items that may be split from the url
    res = urlparse.urlunsplit(url_parts_dec[:5])
  return res.strip()


if __name__ == "__main__":
  parser = argparse.ArgumentParser(description='URL encode or decode input text.')
  parser.add_argument('-l', '--log_level',
                      action='count',
                      default=0,
                      help='Set logging level, multiples for more detailed.')
  parser.add_argument('-u', '--url',
                      default=False,
                      action='store_true',
                      help='Parse the input as a URL and encode / decode the parts that need it.')
  parser.add_argument('-f', '--format',
                      default='text',
                      help='Output format (text, json)')
  parser.add_argument('-d', '--decode',
                      default=False,
                      action='store_true',
                      help="URL decode, otherwise encode")
  parser.add_argument('data',
                      nargs='?',
                      default=None,
                      help='String to process')
  args = parser.parse_args()
  # Setup logging verbosity
  levels = [logging.WARNING, logging.INFO, logging.DEBUG]
  level = levels[min(len(levels) - 1, args.log_level)]
  logging.basicConfig(level=level,
                      format="%(asctime)s %(levelname)s %(message)s")
  instr = args.data
  if instr is None:
    instr = sys.stdin.read().strip()
  res = {}
  if args.decode:
    res = doDecode(instr, args.url)
  else:
    res = doEncode(instr, args.url)
  if args.format == 'json':
    import json
    print json.dumps(res, encoding='utf-8')
    sys.exit(0)
  print res.decode('utf-8')
  sys.exit(0)
