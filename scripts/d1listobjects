#!/bin/env python

"""
List facet values from solr
"""

import sys
import logging
import argparse
import d1_admin_tools
from d1_admin_tools import dataone_response
from d1_client import d1baseclient_1_1
from d1_client import d1baseclient_2_0
from d1_client import cnclient_2_0

#YYYY-MM-DDTHH:MM:SS.mmm+00:00
DATAONE_DATE_FORMAT = "%Y-%m-%dT%H:%M:%S.%f%z"
DATE_FORMAT = "%Y-%m-%dT%H:%M:%S.%f%z"

def doListObjects(client, *params, **kvparams):
  #client = d1baseclient_2_0.DataONEBaseClient_2_0(base_url, capture_response_body=True)
  response = client.listObjects(*params, **kvparams)
  return dataone_response.DataONEResponse( obj=response )


def main():
  '''
  -c --config:      optional path to configuration
  -e --environment: name of environment
  -f --format:      name of output format
  -l --log_level:   flag to turn on logging, more means more detailed logging.

  :return: int for sys.exit()
  '''
  parser = argparse.ArgumentParser(description='List Objects on a CN or MN.')
  parser.add_argument('-B', '--base_url',
                      default=None,
                      help='Base URL of node to connect with (overrides -e)')
  parser.add_argument('-i', '--identifiers',
                      default=False,
                      action='store_true',
                      help='Output only PIDs')
  parser.add_argument('-p', '--page_size',
                      default=10,
                      help='Page size to return')
  parser.add_argument('-s', '--start_index',
                      default=0,
                      help='Zero based index of first entry')
  parser.add_argument('-I','--only_identifiers',
                      action='store_true',
                      default=False,
                      help='Only output the identifiers.')
  parser.add_argument('-C', '--max_records',
                      default=5,
                      help='Maximum number of entries to retrieve.')
  parser.add_argument('-N', '--node_id',
                      default=None,
                      help='Limit response to content from specified NodeId.')
  parser.add_argument('-x', '--date_start',
                      default=None,
                      help='Earliest modified date for records.')
  parser.add_argument('-y', '--date_end',
                      default=None,
                      help='Most recent modified date for records.')
  parser.add_argument('-V', '--api_version',
                      default="2",
                      help='API version to use for request (default = "2")')
  args, config = d1_admin_tools.defaultScriptMain(parser)
  logger = logging.getLogger('main')
  if args.api_version not in ["1", "2"]:
    logger.error("API version must be '1' or '2', not '%s'", args.api_version)
    return 1
  base_url = args.base_url
  if base_url is None:
    base_url = config.envPrimaryBaseURL(args.environment)
  logger.info("Base URL = %s", base_url)
  n_retrieved = 0
  date_start = None
  date_end = None
  if args.date_start is not None:
    date_start = d1_admin_tools.textToDateTime(args.date_start)
    logger.info("date_start '%s' parsed as %s", args.date_start, str(date_start))
  if args.date_end is not None:
    date_end = d1_admin_tools.textToDateTime(args.date_end)
    logger.info("date_end '%s' parsed as %s", args.date_end, str(date_end))
  if int(args.page_size) > int(args.max_records):
    args.page_size = int(args.max_records)
  max_to_retrieve = int(args.max_records)
  start_index = args.start_index
  total_records = -1
  counter = start_index
  client = None
  if args.node_id is not None:
    client = cnclient_2_0.CoordinatingNodeClient_2_0(base_url, capture_response_body=True)
  else:
    if args.api_version == '2':
      client = d1baseclient_2_0.DataONEBaseClient_2_0(base_url, capture_response_body=True)
    else:
      client = d1baseclient_1_1.DataONEBaseClient_1_1(base_url, capture_response_body=True)
  while n_retrieved < max_to_retrieve:
    res = None
    if args.node_id is not None:
      res = doListObjects(client,
                          count = args.page_size,
                          start = start_index,
                          fromDate=date_start,
                          toDate=date_end,
                          nodeId=args.node_id)
    else:
      res = doListObjects(client,
                          count=args.page_size,
                          start=start_index,
                          fromDate=date_start,
                          toDate=date_end)

    if total_records < 0:
      logger.info("Total matching records = %d", res.content.total)
    if total_records < 0:
      total_records = int(res.content.total)
      if max_to_retrieve > total_records:
        max_to_retrieve = total_records
    n_retrieved += res.content.count
    logger.info("Retrieved: %d", n_retrieved)
    start_index = res.content.start + res.content.count
    if args.format == 'xml':
      print res.asXML()
    else:
      for entry in res.content.objectInfo:
        data = {'counter': counter,
                'size':entry.size,
                'date_modified': entry.dateSysMetadataModified.strftime(DATE_FORMAT),
                'pid': entry.identifier.value(),
                'format_id':entry.formatId}
        if args.only_identifiers:
          print("{pid}".format(**data))
        else:
          print "{counter:0>6}: {size:<9} {date_modified:<31} {format_id:<45} {pid:<50}".format(**data)
        counter += 1
  return 0


if __name__ == '__main__':
  sys.exit( main() )